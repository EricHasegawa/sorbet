method ::Object#main {

bb0[rubyRegionId=0, firstDead=-1]():
    <self>: Object = cast(<self>: NilClass, Object);
    try: Integer(0) = 0
    <magic>$44: T.class_of(<Magic>) = alias <C <Magic>>
    <unconditional> -> bb2

# backedges
# - bb15(rubyRegionId=7)
# - bb21(rubyRegionId=3)
# - bb25(rubyRegionId=0)
bb1[rubyRegionId=0, firstDead=-1]():
    <unconditional> -> bb1

# backedges
# - bb0(rubyRegionId=0)
# - bb23(rubyRegionId=2)
bb2[rubyRegionId=0, firstDead=-1](<self>: Object, <returnMethodTemp>$2: NilClass, try: Integer(0), <gotoDeadTemp>$42: NilClass, <magic>$44: T.class_of(<Magic>)):
    <exceptionValue>$4: T.untyped = <get-current-exception>
    <exceptionValue>$4 -> (T.untyped ? bb3 : bb4)

# backedges
# - bb2(rubyRegionId=0)
# - bb19(rubyRegionId=1)
bb3[rubyRegionId=2, firstDead=-1](<self>: Object, <returnMethodTemp>$2: NilClass, try: Integer(0), <exceptionValue>$4: T.untyped, <gotoDeadTemp>$42: NilClass, <magic>$44: T.class_of(<Magic>)):
    <cfgAlias>$49: T.class_of(B) = alias <C B>
    <isaCheckTemp>$50: T::Boolean = <cfgAlias>$49: T.class_of(B).===(<exceptionValue>$4: T.untyped)
    <isaCheckTemp>$50 -> (T::Boolean ? bb22 : bb24)

# backedges
# - bb2(rubyRegionId=0)
bb4[rubyRegionId=1, firstDead=-1](<self>: Object, <returnMethodTemp>$2: NilClass, try: Integer(0), <gotoDeadTemp>$42: NilClass, <magic>$44: T.class_of(<Magic>)):
    <statTemp>$7: String("top") = "top"
    <statTemp>$5: NilClass = <self>: Object.puts(<statTemp>$7: String("top"))
    <magic>$29: T.class_of(<Magic>) = alias <C <Magic>>
    <unconditional> -> bb5

# backedges
# - bb4(rubyRegionId=1)
# - bb17(rubyRegionId=6)
bb5[rubyRegionId=1, firstDead=-1](<self>: Object, <returnMethodTemp>$2: NilClass, try: Integer(0), <magic>$29: T.class_of(<Magic>), <gotoDeadTemp>$42: NilClass, <magic>$44: T.class_of(<Magic>)):
    <exceptionValue>$8: T.untyped = <get-current-exception>
    <exceptionValue>$8 -> (T.untyped ? bb6 : bb7)

# backedges
# - bb5(rubyRegionId=1)
# - bb13(rubyRegionId=5)
bb6[rubyRegionId=6, firstDead=-1](<self>: Object, <returnMethodTemp>$2: NilClass, try: Integer(0), <exceptionValue>$8: T.untyped, <magic>$29: T.class_of(<Magic>), <gotoDeadTemp>$42: NilClass, <magic>$44: T.class_of(<Magic>)):
    <cfgAlias>$34: T.class_of(A) = alias <C A>
    <isaCheckTemp>$35: T::Boolean = <cfgAlias>$34: T.class_of(A).===(<exceptionValue>$8: T.untyped)
    <isaCheckTemp>$35 -> (T::Boolean ? bb16 : bb18)

# backedges
# - bb5(rubyRegionId=1)
bb7[rubyRegionId=5, firstDead=-1](<self>: Object, <returnMethodTemp>$2: NilClass, try: Integer(0), <magic>$29: T.class_of(<Magic>), <gotoDeadTemp>$42: NilClass, <magic>$44: T.class_of(<Magic>)):
    <statTemp>$11: Integer(3) = 3
    <ifTemp>$9: T::Boolean = try: Integer(0).<(<statTemp>$11: Integer(3))
    <ifTemp>$9 -> (T::Boolean ? bb8 : bb9)

# backedges
# - bb7(rubyRegionId=5)
bb8[rubyRegionId=5, firstDead=6](<self>: Object, try: Integer(0), <magic>$29: T.class_of(<Magic>), <gotoDeadTemp>$42: NilClass, <magic>$44: T.class_of(<Magic>)):
    <statTemp>$13: Integer(0) = try
    <statTemp>$14: Integer(1) = 1
    try: Integer = <statTemp>$13: Integer(0).+(<statTemp>$14: Integer(1))
    <cfgAlias>$18: T.class_of(A) = alias <C A>
    <statTemp>$16: A = <cfgAlias>$18: T.class_of(A).new()
    <returnMethodTemp>$2: T.noreturn = <self>: Object.raise(<statTemp>$16: A)
    <unconditional> -> bb13

# backedges
# - bb7(rubyRegionId=5)
bb9[rubyRegionId=5, firstDead=-1](<self>: Object, <returnMethodTemp>$2: NilClass, try: Integer(0), <magic>$29: T.class_of(<Magic>), <gotoDeadTemp>$42: NilClass, <magic>$44: T.class_of(<Magic>)):
    <statTemp>$21: Integer(6) = 6
    <ifTemp>$19: T::Boolean = try: Integer(0).<(<statTemp>$21: Integer(6))
    <ifTemp>$19 -> (T::Boolean ? bb10 : bb13)

# backedges
# - bb9(rubyRegionId=5)
bb10[rubyRegionId=5, firstDead=6](<self>: Object, try: Integer(0), <magic>$29: T.class_of(<Magic>), <gotoDeadTemp>$42: NilClass, <magic>$44: T.class_of(<Magic>)):
    <statTemp>$23: Integer(0) = try
    <statTemp>$24: Integer(1) = 1
    try: Integer = <statTemp>$23: Integer(0).+(<statTemp>$24: Integer(1))
    <cfgAlias>$28: T.class_of(B) = alias <C B>
    <statTemp>$26: B = <cfgAlias>$28: T.class_of(B).new()
    <returnMethodTemp>$2: T.noreturn = <self>: Object.raise(<statTemp>$26: B)
    <unconditional> -> bb13

# backedges
# - bb8(rubyRegionId=5)
# - bb9(rubyRegionId=5)
# - bb10(rubyRegionId=5)
bb13[rubyRegionId=5, firstDead=-1](<self>: Object, <returnMethodTemp>$2: NilClass, try: Integer(0), <magic>$29: T.class_of(<Magic>), <gotoDeadTemp>$42: NilClass, <magic>$44: T.class_of(<Magic>)):
    <exceptionValue>$8: T.untyped = <get-current-exception>
    <exceptionValue>$8 -> (T.untyped ? bb6 : bb14)

# backedges
# - bb13(rubyRegionId=5)
bb14[rubyRegionId=8, firstDead=-1](<self>: Object, <returnMethodTemp>$2: NilClass, try: Integer(0), <gotoDeadTemp>$42: NilClass, <magic>$44: T.class_of(<Magic>)):
    <unconditional> -> bb15

# backedges
# - bb14(rubyRegionId=8)
# - bb16(rubyRegionId=6)
# - bb18(rubyRegionId=6)
bb15[rubyRegionId=7, firstDead=-1](<self>: Object, <returnMethodTemp>$2: NilClass, try: Integer(0), <gotoDeadTemp>$42: T.nilable(TrueClass), <magic>$44: T.class_of(<Magic>)):
    <gotoDeadTemp>$42 -> (T.nilable(TrueClass) ? bb1 : bb19)

# backedges
# - bb6(rubyRegionId=6)
bb16[rubyRegionId=6, firstDead=-1](<self>: Object, <returnMethodTemp>$2: NilClass, try: Integer(0), <exceptionValue>$8: A, <magic>$29: T.class_of(<Magic>), <gotoDeadTemp>$42: NilClass, <magic>$44: T.class_of(<Magic>)):
    <rescueTrueTemp>$31: TrueClass = true
    <rescueHeaderTemp>$30: T.anything = cast(<rescueTrueTemp>$31: TrueClass, T.anything);
    <rescueHeaderTemp>$30 -> (T.anything ? bb17 : bb15)

# backedges
# - bb16(rubyRegionId=6)
bb17[rubyRegionId=6, firstDead=-1](<self>: Object, <returnMethodTemp>$2: NilClass, try: Integer(0), <magic>$29: T.class_of(<Magic>), <gotoDeadTemp>$42: NilClass, <magic>$44: T.class_of(<Magic>)):
    <exceptionValue>$8: NilClass = nil
    <keepForCfgTemp>$32: Sorbet::Private::Static::Void = <magic>$29: T.class_of(<Magic>).<keep-for-cfg>(<exceptionValue>$8: NilClass)
    <statTemp>$38: String("rescue A") = "rescue A"
    <statTemp>$36: NilClass = <self>: Object.puts(<statTemp>$38: String("rescue A"))
    <magic>$40: T.class_of(<Magic>) = alias <C <Magic>>
    <retryTemp>$41: Sorbet::Private::Static::Void = <magic>$40: T.class_of(<Magic>).<retry>()
    <unconditional> -> bb5

# backedges
# - bb6(rubyRegionId=6)
bb18[rubyRegionId=6, firstDead=-1](<self>: Object, <returnMethodTemp>$2: NilClass, try: Integer(0), <magic>$44: T.class_of(<Magic>)):
    <gotoDeadTemp>$42: TrueClass = true
    <unconditional> -> bb15

# backedges
# - bb15(rubyRegionId=7)
bb19[rubyRegionId=1, firstDead=-1](<self>: Object, <returnMethodTemp>$2: NilClass, try: Integer(0), <gotoDeadTemp>$42: NilClass, <magic>$44: T.class_of(<Magic>)):
    <exceptionValue>$4: T.untyped = <get-current-exception>
    <exceptionValue>$4 -> (T.untyped ? bb3 : bb20)

# backedges
# - bb19(rubyRegionId=1)
bb20[rubyRegionId=4, firstDead=-1](<returnMethodTemp>$2: NilClass):
    <unconditional> -> bb21

# backedges
# - bb20(rubyRegionId=4)
# - bb22(rubyRegionId=2)
# - bb24(rubyRegionId=2)
bb21[rubyRegionId=3, firstDead=-1](<returnMethodTemp>$2: NilClass, <gotoDeadTemp>$57: T.nilable(TrueClass)):
    <gotoDeadTemp>$57 -> (T.nilable(TrueClass) ? bb1 : bb25)

# backedges
# - bb3(rubyRegionId=2)
bb22[rubyRegionId=2, firstDead=-1](<self>: Object, <returnMethodTemp>$2: NilClass, try: Integer(0), <exceptionValue>$4: B, <gotoDeadTemp>$42: NilClass, <magic>$44: T.class_of(<Magic>)):
    <rescueTrueTemp>$46: TrueClass = true
    <rescueHeaderTemp>$45: T.anything = cast(<rescueTrueTemp>$46: TrueClass, T.anything);
    <rescueHeaderTemp>$45 -> (T.anything ? bb23 : bb21)

# backedges
# - bb22(rubyRegionId=2)
bb23[rubyRegionId=2, firstDead=-1](<self>: Object, <returnMethodTemp>$2: NilClass, try: Integer(0), <gotoDeadTemp>$42: NilClass, <magic>$44: T.class_of(<Magic>)):
    <exceptionValue>$4: NilClass = nil
    <keepForCfgTemp>$47: Sorbet::Private::Static::Void = <magic>$44: T.class_of(<Magic>).<keep-for-cfg>(<exceptionValue>$4: NilClass)
    <statTemp>$53: String("rescue B ") = "rescue B "
    <statTemp>$51: NilClass = <self>: Object.puts(<statTemp>$53: String("rescue B "))
    <magic>$55: T.class_of(<Magic>) = alias <C <Magic>>
    <retryTemp>$56: Sorbet::Private::Static::Void = <magic>$55: T.class_of(<Magic>).<retry>()
    <unconditional> -> bb2

# backedges
# - bb3(rubyRegionId=2)
bb24[rubyRegionId=2, firstDead=-1](<returnMethodTemp>$2: NilClass):
    <gotoDeadTemp>$57: TrueClass = true
    <unconditional> -> bb21

# backedges
# - bb21(rubyRegionId=3)
bb25[rubyRegionId=0, firstDead=1](<returnMethodTemp>$2: NilClass):
    <finalReturn>: T.noreturn = return <returnMethodTemp>$2: NilClass
    <unconditional> -> bb1

}

method ::<Class:<root>>#<static-init> {

bb0[rubyRegionId=0, firstDead=15]():
    <self>: T.class_of(<root>) = cast(<self>: NilClass, T.class_of(<root>));
    <cfgAlias>$7: T.class_of(Sorbet::Private::Static) = alias <C Static>
    <cfgAlias>$9: T.class_of(A) = alias <C A>
    <statTemp>$5: Sorbet::Private::Static::Void = <cfgAlias>$7: T.class_of(Sorbet::Private::Static).keep_for_ide(<cfgAlias>$9: T.class_of(A))
    <cfgAlias>$12: T.class_of(Sorbet::Private::Static) = alias <C Static>
    <cfgAlias>$14: T.class_of(Exception) = alias <C Exception>
    <statTemp>$10: Sorbet::Private::Static::Void = <cfgAlias>$12: T.class_of(Sorbet::Private::Static).keep_for_ide(<cfgAlias>$14: T.class_of(Exception))
    <cfgAlias>$19: T.class_of(Sorbet::Private::Static) = alias <C Static>
    <cfgAlias>$21: T.class_of(B) = alias <C B>
    <statTemp>$17: Sorbet::Private::Static::Void = <cfgAlias>$19: T.class_of(Sorbet::Private::Static).keep_for_ide(<cfgAlias>$21: T.class_of(B))
    <cfgAlias>$24: T.class_of(Sorbet::Private::Static) = alias <C Static>
    <cfgAlias>$26: T.class_of(Exception) = alias <C Exception>
    <statTemp>$22: Sorbet::Private::Static::Void = <cfgAlias>$24: T.class_of(Sorbet::Private::Static).keep_for_ide(<cfgAlias>$26: T.class_of(Exception))
    <statTemp>$28: T.untyped = <self>: T.class_of(<root>).main()
    <finalReturn>: T.noreturn = return <returnMethodTemp>$2: NilClass
    <unconditional> -> bb1

# backedges
# - bb0(rubyRegionId=0)
bb1[rubyRegionId=0, firstDead=-1]():
    <unconditional> -> bb1

}

method ::<Class:A>#<static-init> {

bb0[rubyRegionId=0, firstDead=2]():
    <self>: T.class_of(A) = cast(<self>: NilClass, T.class_of(A));
    <finalReturn>: T.noreturn = return <returnMethodTemp>$2: NilClass
    <unconditional> -> bb1

# backedges
# - bb0(rubyRegionId=0)
bb1[rubyRegionId=0, firstDead=-1]():
    <unconditional> -> bb1

}

method ::<Class:B>#<static-init> {

bb0[rubyRegionId=0, firstDead=2]():
    <self>: T.class_of(B) = cast(<self>: NilClass, T.class_of(B));
    <finalReturn>: T.noreturn = return <returnMethodTemp>$2: NilClass
    <unconditional> -> bb1

# backedges
# - bb0(rubyRegionId=0)
bb1[rubyRegionId=0, firstDead=-1]():
    <unconditional> -> bb1

}

